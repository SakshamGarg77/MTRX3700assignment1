// Debounce + 2‑FF sync for an active‑low pushbutton (e.g., KEY[0])
module debounce #(
    parameter CLK_HZ   = 50_000_000,
    parameter DEBOUNCE_MS = 10
)(
    input  wire clk,
    input  wire btn_n,          // raw button, active-LOW
    output reg  db_level        // debounced level: 1=pressed, 0=released
);
    localparam integer CNT_MAX = CLK_HZ/1000*DEBOUNCE_MS;

    // 2‑FF synchronizer (sync to clk, convert to active‑high)
    reg s0, s1;
    always @(posedge clk) begin
        s0 <= ~btn_n;           // active-high (pressed=1)
        s1 <= s0;
    end

    // debounce timer
    reg [$clog2(CNT_MAX):0] cnt = 0;
    always @(posedge clk) begin
        if (s1 != db_level) begin
            // input changed — count until stable for DEBOUNCE_MS
            if (cnt == CNT_MAX) begin
                db_level <= s1;
                cnt      <= 0;
            end else begin
                cnt <= cnt + 1;
            end
        end else begin
            cnt <= 0;
        end
    end
endmodule
